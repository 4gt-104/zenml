#  Copyright (c) maiot GmbH 2020. All Rights Reserved.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at:
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
#  or implied. See the License for the specific language governing
#  permissions and limitations under the License.

from typing import Text, List

from zenml.core.steps.base_step import BaseStep
from zenml.core.steps.data.base_data_step import identity_ptransform


class BaseInferrer(BaseStep):
    """
    Base inferrer class. This step is responsible for inference (batch).
    """

    def __init__(self,
                 model_uri: Text,
                 labels: List[Text],
                 **kwargs):
        """
        Base Inferrer constructor.

        Args:
            name: Outward-facing name of the pipeline.
            model_uri: URI for a model, usually generated by
            TrainingPipeline and retrieved by
            `training_pipeline.get_model_uri()`.
        """
        if model_uri is None:
            raise AssertionError('model_uri cannot be None.')
        self.model_uri = model_uri
        self.labels = labels
        super(BaseInferrer, self).__init__(
            model_uri=model_uri,
            labels=labels,
            **kwargs,
        )

    def get_labels(self):
        return self.labels

    def write_inference_results(self):
        return identity_ptransform()
