name: "Install ZenML"
description: "Install ZenML, most integrations, loads/uploads cached venv and pip download cache if applicable"
inputs:
  cache_version:
    description: 'Value gets appended to the cache key and will therefore invalidate the cache if it changes'
    required: true
  python-version:
    description: 'Python version'
    type: string
    required: true
  os:
    description: 'OS'
    type: string
    required: true
  install_integrations:
    description: 'Install ZenML integrations'
    type: string
    required: false
    default: 'yes'

runs:
  using: "composite"
  steps:
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ inputs.python-version }}


    - name: Delete error-causing bash
      shell: bash
      if: ${{ inputs.os == 'windows-latest' }}
      run: rm.exe "C:/WINDOWS/system32/bash.EXE"

    - name: Set path to bash for example runner
      shell: bash
      if: ${{ inputs.os == 'windows-latest' }}
      run: |
        echo "SHELL_EXECUTABLE=C:\Program Files\Git\bin\bash.exe" >> $GITHUB_ENV

    - name: Configure git (non-Windows)
      if: ${{ inputs.os != 'windows-latest' }}
      shell: bash
      run: |
        git config --global user.email "info@zenml.io"
        git config --global user.name "ZenML GmbH"

    - name: Configure git (Windows)
      if: ${{ inputs.os == 'windows-latest' }}
      shell: bash
      run: |
        "C:\Program Files\Git\bin\git.exe" config --global user.email "info@zenml.io"
        "C:\Program Files\Git\bin\git.exe" config --global user.name "ZenML GmbH"

    - name: Get current week
      shell: bash
      id: date
      run: echo "::set-output name=week::$(date +'calendar-week-%W')"


    - uses: whywaita/actions-cache-s3@v2
      id: cache-env
      with:
        key: ${{ inputs.os }}-${{ inputs.cache_version }}-${{ inputs.python-version }}-${{steps.date.outputs.week}}-${{inputs.install_integrations}}-${{ hashFiles('src/zenml/integrations/*/__init__.py') }}
        path: |
          ~/.cache/pip
          pyproject.toml
        restore-keys: |
          ${{ inputs.os }}-${{ inputs.cache_version }}-${{ inputs.python-version }}-${{steps.date.outputs.week}}
        aws-s3-bucket: caching
        aws-access-key-id: tQ6l02JszQmUPXZ4A0wR
        aws-secret-access-key: Akozm2t44hBhDg6ojFXN3Qsjx2bYhLdwhsqn7dE4
        aws-endpoint: "http://10.1.112.95:80"         # Optional
        aws-region: us-east-1                      # Optional
        aws-s3-bucket-endpoint: true              # Optional

    # - uses: tespkg/actions-cache@v1
    #   id: cache-env
    #   env:
    #     AWS_ACCESS_KEY_ID: "tQ6l02JszQmUPXZ4A0wR"
    #     AWS_SECRET_ACCESS_KEY: "Akozm2t44hBhDg6ojFXN3Qsjx2bYhLdwhsqn7dE4"
    #   with:
    #     endpoint: "http://10.1.112.95:80"  # optional
    #     insecure: true # optional, use http instead of https. default false
    #     bucket: "caching" # required
    #     use-fallback: false # optional, use github actions cache fallback, default false
    #     key: ${{ inputs.os }}-${{ inputs.cache_version }}-${{ inputs.python-version }}-${{steps.date.outputs.week}}-${{inputs.install_integrations}}-${{ hashFiles('src/zenml/integrations/*/__init__.py') }}
    #     path: |
    #       ~/.cache/pip
    #       pyproject.toml
    #     restore-keys: |
    #       ${{ inputs.os }}-${{ inputs.cache_version }}-${{ inputs.python-version }}-${{steps.date.outputs.week}}

    #- uses: safoinme/restore-virtualenv@0.0.3
    #  id: cache-env
    #  with:
    #    requirement_files: 'pyproject.toml' 
    #    # The virtualenv cache is invalidated when:
    #    # - manually triggered by means of a custom cache version token
        # - on a weekly basis
        # - any of the integration requirements change (a hash of the
        # __init__.py files is included in the cache key)
    #    custom_cache_key_element: ${{ inputs.cache_version }}-${{steps.date.outputs.week}}-${{inputs.install_integrations}}-${{ hashFiles('src/zenml/integrations/*/__init__.py') }}

    # Disabled for now because it doesn't work well with multiple parallel jobs
    # - uses: syphar/restore-pip-download-cache@v1
    #   with:
    #     requirement_files: 'pyproject.toml'
    #     # The pip download cache can be updated on a weekly basis as new packages
    #     # don't appear that often
    #     custom_cache_key_element: ${{ inputs.cache_version }}-${{ inputs.python-version }}-${{steps.date.outputs.week}}

    - name: Install Terraform (Windows)
      if: ${{ inputs.os == 'windows-latest' }}
      shell: bash
      run: choco install terraform -y

    - name: Install Terraform (Mac)
      if: ${{ inputs.os == 'macos-latest' }}
      shell: bash
      run: |
        brew tap hashicorp/tap
        brew install hashicorp/tap/terraform

    - name: Install ZenML and dependencies
      if: steps.cache-env.outputs.cache-hit != 'true'
      shell: bash
      run: |
        scripts/install-zenml-dev.sh --integrations no

      # if using a cached virtualenv, just refresh the ZenML installation 
    - name: Refresh ZenML installation
      if: steps.cache-env.outputs.cache-hit == 'true'
      shell: bash
      run: |
        scripts/install-zenml-dev.sh

    - name: Check Python environment
      shell: bash
      run: |
        zenml integration list
        pip list
        pip check || true
