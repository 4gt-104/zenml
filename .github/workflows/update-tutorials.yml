name: Update GitBook

on:
  pull_request:
    branches:
      - develop
    paths:
      - 'tutorials/**'

jobs:
  update-gitbook:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4.1.1
      with:
        fetch-depth: 0  # Fetch all history for all branches and tags

    - name: Set up Python 3.9
      uses: actions/setup-python@v5.0.0
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install nbconvert pyyaml jupyter

    - name: Clear notebook outputs
      run: |
        find tutorials -name "*.ipynb" -exec jupyter nbconvert --ClearOutputPreprocessor.enabled=True --inplace {} \;
    
    - name: Update GitBook
      id: update_gitbook
      run: python scripts/update_gitbook.py
    
    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

    - name: Commit changes
      run: |
        git add tutorials docs/book
        git diff-index --quiet HEAD || git commit -m "Update GitBook content and clear notebook outputs"

    - name: Fetch latest changes
      run: git fetch origin ${{ github.head_ref }}

    - name: Merge latest changes
      run: |
        git checkout ${{ github.head_ref }}
        git merge --no-edit origin/${{ github.head_ref }}

    - name: Push changes
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ github.head_ref }}

    - name: Create PR comment
      if: success()
      uses: actions/github-script@v7
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          const fs = require('fs');
          const output = fs.readFileSync(process.env.GITHUB_OUTPUT, 'utf8');
          const lines = output.split('\n');
          
          let comment = "## GitBook Update Summary\n\n";
          comment += "The GitBook content has been automatically updated based on the changes in the `tutorials/` directory. ";
          comment += "Notebook outputs have been cleared in the `tutorials/` directory.\n\n";
          
          lines.forEach(line => {
            if (line.startsWith('suggested_toc_')) {
              const [key, value] = line.split('<<EOF');
              const guideType = key.replace('suggested_toc_', '').replace(/_/g, ' ');
              comment += `### Suggested TOC for ${guideType}:\n\`\`\`markdown\n${value.trim()}\n\`\`\`\n\n`;
            } else if (line.startsWith('deleted_files_') || line.startsWith('retained_files_')) {
              const [key, value] = line.split('=');
              const [type, guideType] = key.split('_', 2);
              const files = value.split(',').filter(Boolean);
              if (files.length > 0) {
                comment += `### ${type === 'deleted' ? 'Deleted' : 'Retained'} Files for ${guideType.replace(/_/g, ' ')}:\n${files.join(", ")}\n\n`;
              }
            }
          });
          
          comment += "Please review these changes and make any necessary adjustments.";
          
          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.name,
            body: comment
          });

    - name: PR Comment on Failure
      if: failure()
      uses: actions/github-script@v7
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.name,
            body: 'There was an error updating the GitBook content. Please check the workflow logs for more information.'
          });